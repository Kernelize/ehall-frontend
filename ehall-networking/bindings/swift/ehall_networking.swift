// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(ehall_networkingFFI)
    import ehall_networkingFFI
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_ehall_networking_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_ehall_networking_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

private func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
private func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset ..< reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value) { reader.data.copyBytes(to: $0, from: range) }
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
private func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> [UInt8] {
    let range = reader.offset ..< (reader.offset + count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer { buffer in
        reader.data.copyBytes(to: buffer, from: range)
    }
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
private func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return try Float(bitPattern: readInt(&reader))
}

// Reads a float at the current offset.
private func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return try Double(bitPattern: readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
private func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

private func createWriter() -> [UInt8] {
    return []
}

private func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
private func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

private func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

private func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
private protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType {}

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
private protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
        var writer = createWriter()
        write(value, into: &writer)
        return RustBuffer(bytes: writer)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2
private let CALL_CANCELLED: Int8 = 3

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T
) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
    case CALL_SUCCESS:
        return

    case CALL_ERROR:
        if let errorHandler = errorHandler {
            throw try errorHandler(callStatus.errorBuf)
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.unexpectedRustCallError
        }

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw try UniffiInternalError.rustPanic(FfiConverterString.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    case CALL_CANCELLED:
        fatalError("Cancellation not supported yet")

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.

private struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

private struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

private struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return try String(bytes: readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

public protocol EhallDataModelProtocol: AnyObject {
    func login(username: String, password: String, school: Schcool) async -> EhallDataModel

    func logout() async -> EhallDataModel
}

public class EhallDataModel:
    EhallDataModelProtocol
{
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ehall_networking_fn_clone_ehalldatamodel(self.pointer, $0) }
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try! rustCall {
            uniffi_ehall_networking_fn_constructor_ehalldatamodel_new($0)
        })
    }

    deinit {
        try! rustCall { uniffi_ehall_networking_fn_free_ehalldatamodel(pointer, $0) }
    }

    public func login(username: String, password: String, school: Schcool) async -> EhallDataModel {
        return try! await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ehall_networking_fn_method_ehalldatamodel_login(
                    self.uniffiClonePointer(),
                    FfiConverterString.lower(username),
                    FfiConverterString.lower(password),
                    FfiConverterTypeSchcool.lower(school)
                )
            },
            pollFunc: ffi_ehall_networking_rust_future_poll_pointer,
            completeFunc: ffi_ehall_networking_rust_future_complete_pointer,
            freeFunc: ffi_ehall_networking_rust_future_free_pointer,
            liftFunc: FfiConverterTypeEhallDataModel.lift,
            errorHandler: nil
        )
    }

    public func logout() async -> EhallDataModel {
        return try! await uniffiRustCallAsync(
            rustFutureFunc: {
                uniffi_ehall_networking_fn_method_ehalldatamodel_logout(
                    self.uniffiClonePointer()
                )
            },
            pollFunc: ffi_ehall_networking_rust_future_poll_pointer,
            completeFunc: ffi_ehall_networking_rust_future_complete_pointer,
            freeFunc: ffi_ehall_networking_rust_future_free_pointer,
            liftFunc: FfiConverterTypeEhallDataModel.lift,
            errorHandler: nil
        )
    }
}

public struct FfiConverterTypeEhallDataModel: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EhallDataModel

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EhallDataModel {
        return EhallDataModel(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EhallDataModel) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EhallDataModel {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EhallDataModel, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}

public func FfiConverterTypeEhallDataModel_lift(_ pointer: UnsafeMutableRawPointer) throws -> EhallDataModel {
    return try FfiConverterTypeEhallDataModel.lift(pointer)
}

public func FfiConverterTypeEhallDataModel_lower(_ value: EhallDataModel) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEhallDataModel.lower(value)
}

public struct LoginRequest {
    public var username: String
    public var password: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        username: String,
        password: String
    ) {
        self.username = username
        self.password = password
    }
}

extension LoginRequest: Equatable, Hashable {
    public static func == (lhs: LoginRequest, rhs: LoginRequest) -> Bool {
        if lhs.username != rhs.username {
            return false
        }
        if lhs.password != rhs.password {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(username)
        hasher.combine(password)
    }
}

public struct FfiConverterTypeLoginRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoginRequest {
        return
            try LoginRequest(
                username: FfiConverterString.read(from: &buf),
                password: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: LoginRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.username, into: &buf)
        FfiConverterString.write(value.password, into: &buf)
    }
}

public func FfiConverterTypeLoginRequest_lift(_ buf: RustBuffer) throws -> LoginRequest {
    return try FfiConverterTypeLoginRequest.lift(buf)
}

public func FfiConverterTypeLoginRequest_lower(_ value: LoginRequest) -> RustBuffer {
    return FfiConverterTypeLoginRequest.lower(value)
}

public struct LoginResponse {
    public var status: String
    public var message: String
    public var authToken: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        status: String,
        message: String,
        authToken: String?
    ) {
        self.status = status
        self.message = message
        self.authToken = authToken
    }
}

extension LoginResponse: Equatable, Hashable {
    public static func == (lhs: LoginResponse, rhs: LoginResponse) -> Bool {
        if lhs.status != rhs.status {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.authToken != rhs.authToken {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(status)
        hasher.combine(message)
        hasher.combine(authToken)
    }
}

public struct FfiConverterTypeLoginResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LoginResponse {
        return
            try LoginResponse(
                status: FfiConverterString.read(from: &buf),
                message: FfiConverterString.read(from: &buf),
                authToken: FfiConverterOptionString.read(from: &buf)
            )
    }

    public static func write(_ value: LoginResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.status, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterOptionString.write(value.authToken, into: &buf)
    }
}

public func FfiConverterTypeLoginResponse_lift(_ buf: RustBuffer) throws -> LoginResponse {
    return try FfiConverterTypeLoginResponse.lift(buf)
}

public func FfiConverterTypeLoginResponse_lower(_ value: LoginResponse) -> RustBuffer {
    return FfiConverterTypeLoginResponse.lower(value)
}

public struct RUserInfo {
    public var userName: String
    public var userId: String
    public var userType: UserType
    public var userSex: UserSex

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        userName: String,
        userId: String,
        userType: UserType,
        userSex: UserSex
    ) {
        self.userName = userName
        self.userId = userId
        self.userType = userType
        self.userSex = userSex
    }
}

extension RUserInfo: Equatable, Hashable {
    public static func == (lhs: RUserInfo, rhs: RUserInfo) -> Bool {
        if lhs.userName != rhs.userName {
            return false
        }
        if lhs.userId != rhs.userId {
            return false
        }
        if lhs.userType != rhs.userType {
            return false
        }
        if lhs.userSex != rhs.userSex {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(userName)
        hasher.combine(userId)
        hasher.combine(userType)
        hasher.combine(userSex)
    }
}

public struct FfiConverterTypeRUserInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RUserInfo {
        return
            try RUserInfo(
                userName: FfiConverterString.read(from: &buf),
                userId: FfiConverterString.read(from: &buf),
                userType: FfiConverterTypeUserType.read(from: &buf),
                userSex: FfiConverterTypeUserSex.read(from: &buf)
            )
    }

    public static func write(_ value: RUserInfo, into buf: inout [UInt8]) {
        FfiConverterString.write(value.userName, into: &buf)
        FfiConverterString.write(value.userId, into: &buf)
        FfiConverterTypeUserType.write(value.userType, into: &buf)
        FfiConverterTypeUserSex.write(value.userSex, into: &buf)
    }
}

public func FfiConverterTypeRUserInfo_lift(_ buf: RustBuffer) throws -> RUserInfo {
    return try FfiConverterTypeRUserInfo.lift(buf)
}

public func FfiConverterTypeRUserInfo_lower(_ value: RUserInfo) -> RustBuffer {
    return FfiConverterTypeRUserInfo.lower(value)
}

public struct Score {
    public var courseName: String
    public var examTime: String
    public var courseId: String
    public var classId: String
    public var totalScore: UInt64
    public var gradePoint: String
    public var regularScore: String?
    public var midScore: String?
    public var finalScore: String?
    public var regularPercent: String?
    public var midPrecent: String?
    public var finalPrecent: String?
    public var courseType: String
    public var courseCate: String
    public var isRetake: String
    public var credits: Double
    public var gradeType: String
    public var semester: String
    public var department: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        courseName: String,
        examTime: String,
        courseId: String,
        classId: String,
        totalScore: UInt64,
        gradePoint: String,
        regularScore: String?,
        midScore: String?,
        finalScore: String?,
        regularPercent: String?,
        midPrecent: String?,
        finalPrecent: String?,
        courseType: String,
        courseCate: String,
        isRetake: String,
        credits: Double,
        gradeType: String,
        semester: String,
        department: String
    ) {
        self.courseName = courseName
        self.examTime = examTime
        self.courseId = courseId
        self.classId = classId
        self.totalScore = totalScore
        self.gradePoint = gradePoint
        self.regularScore = regularScore
        self.midScore = midScore
        self.finalScore = finalScore
        self.regularPercent = regularPercent
        self.midPrecent = midPrecent
        self.finalPrecent = finalPrecent
        self.courseType = courseType
        self.courseCate = courseCate
        self.isRetake = isRetake
        self.credits = credits
        self.gradeType = gradeType
        self.semester = semester
        self.department = department
    }
}

extension Score: Equatable, Hashable {
    public static func == (lhs: Score, rhs: Score) -> Bool {
        if lhs.courseName != rhs.courseName {
            return false
        }
        if lhs.examTime != rhs.examTime {
            return false
        }
        if lhs.courseId != rhs.courseId {
            return false
        }
        if lhs.classId != rhs.classId {
            return false
        }
        if lhs.totalScore != rhs.totalScore {
            return false
        }
        if lhs.gradePoint != rhs.gradePoint {
            return false
        }
        if lhs.regularScore != rhs.regularScore {
            return false
        }
        if lhs.midScore != rhs.midScore {
            return false
        }
        if lhs.finalScore != rhs.finalScore {
            return false
        }
        if lhs.regularPercent != rhs.regularPercent {
            return false
        }
        if lhs.midPrecent != rhs.midPrecent {
            return false
        }
        if lhs.finalPrecent != rhs.finalPrecent {
            return false
        }
        if lhs.courseType != rhs.courseType {
            return false
        }
        if lhs.courseCate != rhs.courseCate {
            return false
        }
        if lhs.isRetake != rhs.isRetake {
            return false
        }
        if lhs.credits != rhs.credits {
            return false
        }
        if lhs.gradeType != rhs.gradeType {
            return false
        }
        if lhs.semester != rhs.semester {
            return false
        }
        if lhs.department != rhs.department {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(courseName)
        hasher.combine(examTime)
        hasher.combine(courseId)
        hasher.combine(classId)
        hasher.combine(totalScore)
        hasher.combine(gradePoint)
        hasher.combine(regularScore)
        hasher.combine(midScore)
        hasher.combine(finalScore)
        hasher.combine(regularPercent)
        hasher.combine(midPrecent)
        hasher.combine(finalPrecent)
        hasher.combine(courseType)
        hasher.combine(courseCate)
        hasher.combine(isRetake)
        hasher.combine(credits)
        hasher.combine(gradeType)
        hasher.combine(semester)
        hasher.combine(department)
    }
}

public struct FfiConverterTypeScore: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Score {
        return
            try Score(
                courseName: FfiConverterString.read(from: &buf),
                examTime: FfiConverterString.read(from: &buf),
                courseId: FfiConverterString.read(from: &buf),
                classId: FfiConverterString.read(from: &buf),
                totalScore: FfiConverterUInt64.read(from: &buf),
                gradePoint: FfiConverterString.read(from: &buf),
                regularScore: FfiConverterOptionString.read(from: &buf),
                midScore: FfiConverterOptionString.read(from: &buf),
                finalScore: FfiConverterOptionString.read(from: &buf),
                regularPercent: FfiConverterOptionString.read(from: &buf),
                midPrecent: FfiConverterOptionString.read(from: &buf),
                finalPrecent: FfiConverterOptionString.read(from: &buf),
                courseType: FfiConverterString.read(from: &buf),
                courseCate: FfiConverterString.read(from: &buf),
                isRetake: FfiConverterString.read(from: &buf),
                credits: FfiConverterDouble.read(from: &buf),
                gradeType: FfiConverterString.read(from: &buf),
                semester: FfiConverterString.read(from: &buf),
                department: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: Score, into buf: inout [UInt8]) {
        FfiConverterString.write(value.courseName, into: &buf)
        FfiConverterString.write(value.examTime, into: &buf)
        FfiConverterString.write(value.courseId, into: &buf)
        FfiConverterString.write(value.classId, into: &buf)
        FfiConverterUInt64.write(value.totalScore, into: &buf)
        FfiConverterString.write(value.gradePoint, into: &buf)
        FfiConverterOptionString.write(value.regularScore, into: &buf)
        FfiConverterOptionString.write(value.midScore, into: &buf)
        FfiConverterOptionString.write(value.finalScore, into: &buf)
        FfiConverterOptionString.write(value.regularPercent, into: &buf)
        FfiConverterOptionString.write(value.midPrecent, into: &buf)
        FfiConverterOptionString.write(value.finalPrecent, into: &buf)
        FfiConverterString.write(value.courseType, into: &buf)
        FfiConverterString.write(value.courseCate, into: &buf)
        FfiConverterString.write(value.isRetake, into: &buf)
        FfiConverterDouble.write(value.credits, into: &buf)
        FfiConverterString.write(value.gradeType, into: &buf)
        FfiConverterString.write(value.semester, into: &buf)
        FfiConverterString.write(value.department, into: &buf)
    }
}

public func FfiConverterTypeScore_lift(_ buf: RustBuffer) throws -> Score {
    return try FfiConverterTypeScore.lift(buf)
}

public func FfiConverterTypeScore_lower(_ value: Score) -> RustBuffer {
    return FfiConverterTypeScore.lower(value)
}

public struct ScoreRequest {
    public var semester: String
    public var amount: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        semester: String,
        amount: UInt64
    ) {
        self.semester = semester
        self.amount = amount
    }
}

extension ScoreRequest: Equatable, Hashable {
    public static func == (lhs: ScoreRequest, rhs: ScoreRequest) -> Bool {
        if lhs.semester != rhs.semester {
            return false
        }
        if lhs.amount != rhs.amount {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(semester)
        hasher.combine(amount)
    }
}

public struct FfiConverterTypeScoreRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ScoreRequest {
        return
            try ScoreRequest(
                semester: FfiConverterString.read(from: &buf),
                amount: FfiConverterUInt64.read(from: &buf)
            )
    }

    public static func write(_ value: ScoreRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.semester, into: &buf)
        FfiConverterUInt64.write(value.amount, into: &buf)
    }
}

public func FfiConverterTypeScoreRequest_lift(_ buf: RustBuffer) throws -> ScoreRequest {
    return try FfiConverterTypeScoreRequest.lift(buf)
}

public func FfiConverterTypeScoreRequest_lower(_ value: ScoreRequest) -> RustBuffer {
    return FfiConverterTypeScoreRequest.lower(value)
}

public struct ScoreResponse {
    public var status: String
    public var message: String
    public var totalCount: UInt64
    public var data: [Score]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        status: String,
        message: String,
        totalCount: UInt64,
        data: [Score]?
    ) {
        self.status = status
        self.message = message
        self.totalCount = totalCount
        self.data = data
    }
}

extension ScoreResponse: Equatable, Hashable {
    public static func == (lhs: ScoreResponse, rhs: ScoreResponse) -> Bool {
        if lhs.status != rhs.status {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.totalCount != rhs.totalCount {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(status)
        hasher.combine(message)
        hasher.combine(totalCount)
        hasher.combine(data)
    }
}

public struct FfiConverterTypeScoreResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ScoreResponse {
        return
            try ScoreResponse(
                status: FfiConverterString.read(from: &buf),
                message: FfiConverterString.read(from: &buf),
                totalCount: FfiConverterUInt64.read(from: &buf),
                data: FfiConverterOptionSequenceTypeScore.read(from: &buf)
            )
    }

    public static func write(_ value: ScoreResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.status, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterUInt64.write(value.totalCount, into: &buf)
        FfiConverterOptionSequenceTypeScore.write(value.data, into: &buf)
    }
}

public func FfiConverterTypeScoreResponse_lift(_ buf: RustBuffer) throws -> ScoreResponse {
    return try FfiConverterTypeScoreResponse.lift(buf)
}

public func FfiConverterTypeScoreResponse_lower(_ value: ScoreResponse) -> RustBuffer {
    return FfiConverterTypeScoreResponse.lower(value)
}

public struct UserInfoRequest {
    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init() {}
}

extension UserInfoRequest: Equatable, Hashable {
    public static func == (_: UserInfoRequest, _: UserInfoRequest) -> Bool {
        return true
    }

    public func hash(into _: inout Hasher) {}
}

public struct FfiConverterTypeUserInfoRequest: FfiConverterRustBuffer {
    public static func read(from _: inout (data: Data, offset: Data.Index)) throws -> UserInfoRequest {
        return
            UserInfoRequest()
    }

    public static func write(_: UserInfoRequest, into _: inout [UInt8]) {}
}

public func FfiConverterTypeUserInfoRequest_lift(_ buf: RustBuffer) throws -> UserInfoRequest {
    return try FfiConverterTypeUserInfoRequest.lift(buf)
}

public func FfiConverterTypeUserInfoRequest_lower(_ value: UserInfoRequest) -> RustBuffer {
    return FfiConverterTypeUserInfoRequest.lower(value)
}

public struct UserInfoResponse {
    public var status: String
    public var message: String
    public var data: RUserInfo?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        status: String,
        message: String,
        data: RUserInfo?
    ) {
        self.status = status
        self.message = message
        self.data = data
    }
}

extension UserInfoResponse: Equatable, Hashable {
    public static func == (lhs: UserInfoResponse, rhs: UserInfoResponse) -> Bool {
        if lhs.status != rhs.status {
            return false
        }
        if lhs.message != rhs.message {
            return false
        }
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(status)
        hasher.combine(message)
        hasher.combine(data)
    }
}

public struct FfiConverterTypeUserInfoResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserInfoResponse {
        return
            try UserInfoResponse(
                status: FfiConverterString.read(from: &buf),
                message: FfiConverterString.read(from: &buf),
                data: FfiConverterOptionTypeRUserInfo.read(from: &buf)
            )
    }

    public static func write(_ value: UserInfoResponse, into buf: inout [UInt8]) {
        FfiConverterString.write(value.status, into: &buf)
        FfiConverterString.write(value.message, into: &buf)
        FfiConverterOptionTypeRUserInfo.write(value.data, into: &buf)
    }
}

public func FfiConverterTypeUserInfoResponse_lift(_ buf: RustBuffer) throws -> UserInfoResponse {
    return try FfiConverterTypeUserInfoResponse.lift(buf)
}

public func FfiConverterTypeUserInfoResponse_lower(_ value: UserInfoResponse) -> RustBuffer {
    return FfiConverterTypeUserInfoResponse.lower(value)
}

public struct UsernameAndPassword {
    public var username: String
    public var password: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        username: String,
        password: String
    ) {
        self.username = username
        self.password = password
    }
}

extension UsernameAndPassword: Equatable, Hashable {
    public static func == (lhs: UsernameAndPassword, rhs: UsernameAndPassword) -> Bool {
        if lhs.username != rhs.username {
            return false
        }
        if lhs.password != rhs.password {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(username)
        hasher.combine(password)
    }
}

public struct FfiConverterTypeUsernameAndPassword: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UsernameAndPassword {
        return
            try UsernameAndPassword(
                username: FfiConverterString.read(from: &buf),
                password: FfiConverterString.read(from: &buf)
            )
    }

    public static func write(_ value: UsernameAndPassword, into buf: inout [UInt8]) {
        FfiConverterString.write(value.username, into: &buf)
        FfiConverterString.write(value.password, into: &buf)
    }
}

public func FfiConverterTypeUsernameAndPassword_lift(_ buf: RustBuffer) throws -> UsernameAndPassword {
    return try FfiConverterTypeUsernameAndPassword.lift(buf)
}

public func FfiConverterTypeUsernameAndPassword_lower(_ value: UsernameAndPassword) -> RustBuffer {
    return FfiConverterTypeUsernameAndPassword.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Schcool {
    case nanjingNormalUniversity
    case yanShanUniversity
}

public struct FfiConverterTypeSchcool: FfiConverterRustBuffer {
    typealias SwiftType = Schcool

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Schcool {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .nanjingNormalUniversity

        case 2: return .yanShanUniversity

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Schcool, into buf: inout [UInt8]) {
        switch value {
        case .nanjingNormalUniversity:
            writeInt(&buf, Int32(1))

        case .yanShanUniversity:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeSchcool_lift(_ buf: RustBuffer) throws -> Schcool {
    return try FfiConverterTypeSchcool.lift(buf)
}

public func FfiConverterTypeSchcool_lower(_ value: Schcool) -> RustBuffer {
    return FfiConverterTypeSchcool.lower(value)
}

extension Schcool: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum UserSex {
    case male
    case female
}

public struct FfiConverterTypeUserSex: FfiConverterRustBuffer {
    typealias SwiftType = UserSex

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserSex {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .male

        case 2: return .female

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UserSex, into buf: inout [UInt8]) {
        switch value {
        case .male:
            writeInt(&buf, Int32(1))

        case .female:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeUserSex_lift(_ buf: RustBuffer) throws -> UserSex {
    return try FfiConverterTypeUserSex.lift(buf)
}

public func FfiConverterTypeUserSex_lower(_ value: UserSex) -> RustBuffer {
    return FfiConverterTypeUserSex.lower(value)
}

extension UserSex: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum UserType {
    case student
    case teacher
}

public struct FfiConverterTypeUserType: FfiConverterRustBuffer {
    typealias SwiftType = UserType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        case 1: return .student

        case 2: return .teacher

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: UserType, into buf: inout [UInt8]) {
        switch value {
        case .student:
            writeInt(&buf, Int32(1))

        case .teacher:
            writeInt(&buf, Int32(2))
        }
    }
}

public func FfiConverterTypeUserType_lift(_ buf: RustBuffer) throws -> UserType {
    return try FfiConverterTypeUserType.lift(buf)
}

public func FfiConverterTypeUserType_lower(_ value: UserType) -> RustBuffer {
    return FfiConverterTypeUserType.lower(value)
}

extension UserType: Equatable, Hashable {}

private struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionTypeRUserInfo: FfiConverterRustBuffer {
    typealias SwiftType = RUserInfo?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRUserInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRUserInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterOptionSequenceTypeScore: FfiConverterRustBuffer {
    typealias SwiftType = [Score]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeScore.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeScore.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private struct FfiConverterSequenceTypeScore: FfiConverterRustBuffer {
    typealias SwiftType = [Score]

    public static func write(_ value: [Score], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeScore.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Score] {
        let len: Int32 = try readInt(&buf)
        var seq = [Score]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            try seq.append(FfiConverterTypeScore.read(from: &buf))
        }
        return seq
    }
}

private let UNIFFI_RUST_FUTURE_POLL_READY: Int8 = 0
private let UNIFFI_RUST_FUTURE_POLL_MAYBE_READY: Int8 = 1

private func uniffiRustCallAsync<F, T>(
    rustFutureFunc: () -> UnsafeMutableRawPointer,
    pollFunc: (UnsafeMutableRawPointer, @escaping UniFfiRustFutureContinuation, UnsafeMutableRawPointer) -> Void,
    completeFunc: (UnsafeMutableRawPointer, UnsafeMutablePointer<RustCallStatus>) -> F,
    freeFunc: (UnsafeMutableRawPointer) -> Void,
    liftFunc: (F) throws -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) async throws -> T {
    // Make sure to call uniffiEnsureInitialized() since future creation doesn't have a
    // RustCallStatus param, so doesn't use makeRustCall()
    uniffiEnsureInitialized()
    let rustFuture = rustFutureFunc()
    defer {
        freeFunc(rustFuture)
    }
    var pollResult: Int8
    repeat {
        pollResult = await withUnsafeContinuation {
            pollFunc(rustFuture, uniffiFutureContinuationCallback, ContinuationHolder($0).toOpaque())
        }
    } while pollResult != UNIFFI_RUST_FUTURE_POLL_READY

    return try liftFunc(makeRustCall(
        { completeFunc(rustFuture, $0) },
        errorHandler: errorHandler
    ))
}

// Callback handlers for an async calls.  These are invoked by Rust when the future is ready.  They
// lift the return value or error and resume the suspended function.
private func uniffiFutureContinuationCallback(ptr: UnsafeMutableRawPointer, pollResult: Int8) {
    ContinuationHolder.fromOpaque(ptr).resume(pollResult)
}

// Wraps UnsafeContinuation in a class so that we can use reference counting when passing it across
// the FFI
private class ContinuationHolder {
    let continuation: UnsafeContinuation<Int8, Never>

    init(_ continuation: UnsafeContinuation<Int8, Never>) {
        self.continuation = continuation
    }

    func resume(_ pollResult: Int8) {
        continuation.resume(returning: pollResult)
    }

    func toOpaque() -> UnsafeMutableRawPointer {
        return Unmanaged<ContinuationHolder>.passRetained(self).toOpaque()
    }

    static func fromOpaque(_ ptr: UnsafeRawPointer) -> ContinuationHolder {
        return Unmanaged<ContinuationHolder>.fromOpaque(ptr).takeRetainedValue()
    }
}

public func rustAdd(left: UInt64, right: UInt64) -> UInt64 {
    return try! FfiConverterUInt64.lift(
        try! rustCall {
            uniffi_ehall_networking_fn_func_rust_add(
                FfiConverterUInt64.lower(left),
                FfiConverterUInt64.lower(right), $0
            )
        }
    )
}

public func rustGreeting(name: String) -> String {
    return try! FfiConverterString.lift(
        try! rustCall {
            uniffi_ehall_networking_fn_func_rust_greeting(
                FfiConverterString.lower(name), $0
            )
        }
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}

// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_ehall_networking_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if uniffi_ehall_networking_checksum_func_rust_add() != 53188 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ehall_networking_checksum_func_rust_greeting() != 7224 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ehall_networking_checksum_method_ehalldatamodel_login() != 49334 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ehall_networking_checksum_method_ehalldatamodel_logout() != 15260 {
        return InitializationResult.apiChecksumMismatch
    }
    if uniffi_ehall_networking_checksum_constructor_ehalldatamodel_new() != 44137 {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
